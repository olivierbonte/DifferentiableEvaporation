var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EvaporationModel","category":"page"},{"location":"#EvaporationModel-documentation","page":"Home","title":"EvaporationModel documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\",]","category":"page"},{"location":"#Config","page":"Home","title":"Config","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [EvaporationModel]\nPages = [\"config.jl\"]","category":"page"},{"location":"#EvaporationModel.VegetationParameters","page":"Home","title":"EvaporationModel.VegetationParameters","text":"VegetationParameters(;...)\n\nDefault vegetation parameters for the Jarvis-Stewart model. The fields are:\n\nvegtype: The type of vegetation (e.g., Crops, ShortGrass, etc.)\nrsmin: Minimum stomatal resistance [s/m]\ngd: Coefficient relating vapour pressure deficit to stomatal resistance [Pa⁻¹]\n\nBased on get_default_value function, values of rsmin and gd  are set based on vegtype. Default values can be overridden by passing them as keyword arguments.\n\nExamples\n\n# Get default parameters\nparams_Default = VegetationParameters(vegtype=Crops)\n# Adapt a default value\nparams = VegetationParameters(vegtype=Crops, rsmin=300.0) \nparams.rsmin == 300.0\n# output\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#EvaporationModel.VegetationType","page":"Home","title":"EvaporationModel.VegetationType","text":"VegetationType\n\nAbstract type defined to represent different types of vegetation.\n\nBelow example provided on how to check all the subtypes:\n\nsubtypes(VegetationType)\n\n\n\n\n\n","category":"type"},{"location":"#EvaporationModel.get_default_value-Tuple{Type{<:VegetationType}}","page":"Home","title":"EvaporationModel.get_default_value","text":"get_default_value(vegtype::Type{<:VegetationType})\n\nAssign default values for minimal stomatal resistance (rsmin) and coefficient relating  vapour pressure deficit to stomatal resistance (gd) based on vegetation type. \n\nThe values come from Table 8.1 of the  IFS Cy49r1 documentation Part IV: Phyiscal processes. Not part of public API, only used in VegetationParameters.\n\n\n\n\n\n","category":"method"},{"location":"#Evaporation","page":"Home","title":"Evaporation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [EvaporationModel]\nPages = [\"evaporation.jl\"]","category":"page"},{"location":"#EvaporationModel.penman_monteith-NTuple{6, Any}","page":"Home","title":"EvaporationModel.penman_monteith","text":"penman_monteith(t_air, p_surf, r_net, vpd, r_a, r_s; g = 0.0, kwargs...)\n\nCompute evaporation (ET) and latent heat flux (LE)  using the Penman-Monteith equation.\n\nArguments\n\nt_air: Air temperature [K].\np_surf: Surface pressure [Pa].\nr_net: Net radiation [W/m²].\nvpd: Vapor pressure deficit [Pa].\nr_a: Aerodynamic resistance [s/m].\nr_s: Surface resistance [s/m].\ng: Soil heat flux [W/m²]. Default is 0.0.\nkwargs: Additional keyword arguments.\n\nReturns\n\net: Potential evapotranspiration [kg/(m^2 * s)].\nle: Latent heat flux [W/m²].\n\n\n\n\n\n","category":"method"},{"location":"#Soil","page":"Home","title":"Soil","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [EvaporationModel]\nPages = [\"soil.jl\"]","category":"page"},{"location":"#EvaporationModel.c_1-NTuple{4, Any}","page":"Home","title":"EvaporationModel.c_1","text":"c_1(w_1, w_sat, b, c_1sat)\n\nCompute force coefficient c_1 of force restore framework for soil mositure. See equation 20 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nw_1: Surface soil moisutre [m³ m⁻³]\nw_sat: Saturated soil moisture [m³ m⁻³]\nb: the Brooks-Corey/Clapp-Hornberger parameter, see compute_b\nc_1sat: See c_1sat\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.c_1sat-Tuple{T} where T","page":"Home","title":"EvaporationModel.c_1sat","text":"c_1sat(x_clay)\n\nCompute the value for force-restore coefficient c_1 when w_g =  w_sat. See equation 32 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nx_clay: The percentage of clay in the soil.\n\nReturns\n\nc_1_sat: The computed value of c_1_sat.\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.c_2-Union{Tuple{T}, Tuple{T, T, T}} where T","page":"Home","title":"EvaporationModel.c_2","text":"c_2(w_2, w_sat, c2_ref)\n\nCompute restore coefficient c_2 of force restore framework for soil moisture See equation 21 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nw_2: The second layer soil mositure [m³ m⁻³]\nw_sat: The saturated soil moisture [m³ m⁻³]\nc_2ref: See c_2ref\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.c_2ref-Tuple{T} where T","page":"Home","title":"EvaporationModel.c_2ref","text":"c_2ref(x_clay)\n\nCompute the value for force-restore coefficient c_2 when w_2 = 0.5 w_sat,  c_2ref  based on the percentage of clay in the soil. See equation 33 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nx_clay: The percentage of clay in the soil [%].\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.c_3-Tuple{T} where T","page":"Home","title":"EvaporationModel.c_3","text":"c_3(x_clay)\n\nCompute the coefficient for graviational drainage c_3 based on the percentage of clay in the soil. See equation 34 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nx_clay: The percentage of clay in the soil [%].\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.compute_a-Tuple{T} where T","page":"Home","title":"EvaporationModel.compute_a","text":"compute_a(x_clay)\n\nCompute a, a parameter for for w_geq calculation,  of clay in the soil. See equation 35 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nx_clay: The percentage of clay in the soil [%].\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.compute_b-Tuple{Any, Any}","page":"Home","title":"EvaporationModel.compute_b","text":"compute_b(::Val{:clay}, x_clay)\ncompute_b(::Val{:van_genuchten}, n)\n\nCompute b, the Brooks-Corey/Clapp-Hornberger parameter  (see equation 1 of Clapp & Hornberger  for its definition), based on percentage clay or the van Genuchten paramter n.\t\n\nArguments\n\napproach: Either Val(:clay) or Val(:van_genuchten).\nx_clay: The percentage of clay in the soil [%], only for approach = Val(:clay).\nn: The Van Genuchten parameter n, only for approach = Val(:van_genuchten).\t\n\nDetails\n\nFor the Val(:clay) approach, Equation (30) of  Noilhan & Mahfouf, 1996 is used.\n\nFor the Val(:van_genuchten) approach, the parameter equivalence between the Brooks-Corey and van Genuchten, is based on Morel-Seytoux et al., 1996.  Note that in this paper, M is equivalent to b. \n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.compute_p-Tuple{T} where T","page":"Home","title":"EvaporationModel.compute_p","text":"compute_p(x_clay)\n\nCompute p, a parameter for for w_geq calculation, based on the percentage of clay in the soil. See equation 36 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nx_clay: The percentage of clay in the soil [%].\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.w_geq-NTuple{4, Any}","page":"Home","title":"EvaporationModel.w_geq","text":"w_geq(w_2, w_sat, a, p)\n\nCompute w_geq, the equilibrium surface soil moisture (i.e. when capillary and  gravitational forces are in equilibrium). See equation 19 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nw_2: The second layer soil moisture [m³ m⁻³].\nw_sat: The saturated soil moisture [m³ m⁻³].\na: Clapp-Hornberger parameter a (see compute_a)\np: Clapp-Hornberger parameter a (see compute_p)\n\n\n\n\n\n","category":"method"},{"location":"#Utils","page":"Home","title":"Utils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [EvaporationModel]\nPages = [\"utils.jl\"]","category":"page"},{"location":"#EvaporationModel.compute_amplitude_and_phase-Tuple{AbstractVector, AbstractVector}","page":"Home","title":"EvaporationModel.compute_amplitude_and_phase","text":"compute_amplitude_and_phase(an::AbstractVector, bn::AbstractVector)\n\nTranslate the fourier coefficients from sin-cos form (see  fourier_series) to amplitude phase form:\n\nf(t) = a_0 + sum_n=1^M left( a_bn sin(n omega t + phi) right)\n\nSpecifically, it returns both a_{bn} and \\phi vectors. FYI: proof of conversion found here. Crucial to use atan2 function\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.fourier_series-Tuple{Any, ComponentArrays.ComponentArray, Any}","page":"Home","title":"EvaporationModel.fourier_series","text":"fourier_series(t, coeffs, ω)\n\nFunction that gives the Fourier series, as presented in equation 5 of Murray & Verhoef \n\nf(t) = a_0 + sum_n=1^M left( a_n cos(n omega t) +  b_n sin(n omega t) right)\n\nArguments\n\nt: Timestamp in seconds \ncoeffs::ComponentArray: array holding the coefficients\na0: Mean component\nan: Cosine coefficients\nbn: Sine coefficients\nω: Radial frequency [rad/s]\n\n\n\n\n\n","category":"method"}]
}
