var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EvaporationModel","category":"page"},{"location":"#EvaporationModel-documentation","page":"Home","title":"EvaporationModel documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\",]","category":"page"},{"location":"#Config","page":"Home","title":"Config","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [EvaporationModel]\nPages = [\"config.jl\"]","category":"page"},{"location":"#EvaporationModel.VegetationParameters","page":"Home","title":"EvaporationModel.VegetationParameters","text":"VegetationParameters(;...)\n\nDefault vegetation parameters for the Jarvis-Stewart model. The fields are:\n\nvegtype: The type of vegetation (e.g., Crops, ShortGrass, etc.)\nr_smin: Minimum stomatal resistance [s/m]\ng_d: Coefficient relating vapour pressure deficit to stomatal resistance [Pa⁻¹]\n\nBased on get_default_value function, values of r_smin and g_d  are set based on vegtype. Default values can be overridden by passing them as keyword arguments.\n\nExamples\n\nusing EvaporationModel\n# Get default parameters\nparams_default = VegetationParameters(vegtype=Crops())\n# Adapt a default value\nparams = VegetationParameters(vegtype=Crops(), r_smin=300.0) \nparams.r_smin == 300.0\n\n# output\n\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#EvaporationModel.VegetationType","page":"Home","title":"EvaporationModel.VegetationType","text":"VegetationType\n\nAbstract type defined to represent different types of vegetation.\n\nBelow example provided on how to check all the subtypes (which are structs):\n\nsubtypes(VegetationType)\n\n\n\n\n\n","category":"type"},{"location":"#EvaporationModel.get_default_value-Tuple{VegetationType}","page":"Home","title":"EvaporationModel.get_default_value","text":"get_default_value(vegtype::VegetationType)\n\nAssign default values for minimal stomatal resistance (r_smin) and coefficient relating  vapour pressure deficit to stomatal resistance (g_d) based on vegetation type. \n\nThe values come from Table 8.1 of the  IFS Cy49r1 documentation Part IV: Phyiscal processes. Not part of public API, only used in VegetationParameters.\n\n\n\n\n\n","category":"method"},{"location":"#Evaporation","page":"Home","title":"Evaporation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [EvaporationModel]\nPages = [\"evaporation.jl\"]","category":"page"},{"location":"#EvaporationModel.penman_monteith-Union{Tuple{T}, NTuple{6, T}} where T","page":"Home","title":"EvaporationModel.penman_monteith","text":"penman_monteith(T_a, P_a, R_n, VPD, r_a, r_s; g = 0.0, kwargs...)\n\nCompute evaporation (ET) and latent heat flux (LE)  using the Penman-Monteith equation.\n\nArguments\n\nT_a: Air temperature [K].\nP_a: Surface pressure [Pa].\nR_n: Net radiation [W/m²].\nVPD: Vapor pressure deficit [Pa].\nr_a: Aerodynamic resistance [s/m].\nr_s: Surface resistance [s/m].\ng: Soil heat flux [W/m²]. Default is 0.0.\nkwargs: Additional keyword arguments.\n\nReturns\n\nET: Potential evapotranspiration [kg/(m² * s)].\nλE: Latent heat flux [W/m²].\n\nSee also\n\nBigleaf.potential_ET  for more details on the Penman-Monteith equation.\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.total_evaporation-Union{Tuple{T}, NTuple{12, T}} where T","page":"Home","title":"EvaporationModel.total_evaporation","text":"total_evaporation(T_a, P_a, VPD, A, A_c, A_s, r_aa, r_ac, r_as, r_sc, r_ss, f_wet)\n\nCompute total evaporation (ET) / latent heat flux (λE) using a multi-source model accounting for bare soil evaporation, transpiration and interception \n\nArguments\n\nT_a: Air temperature [K]\nP_a: Surface pressure [Pa]\nVPD: Vapor pressure deficit [Pa]\nA: Total available energy [W/m²]\nA_c: Available energy for canopy [W/m²]\nA_s: Available energy for soil [W/m²]\nr_aa: Aerodynamic resistance between canopy source height and observation height [s/m]\nr_ac: Boundary layer resistance i.e. excess resistance to heat transfer [s/m]\nr_as: Aerodynamic resistance between soil and canopy source height [s/m]\nr_sc: Surface resistance for canopy [s/m]\nr_ss: Surface resistance for soil [s/m]\nf_wet: Fraction of canopy that is wet [-]\n\nReturns\n\nλE: Total latent heat flux [W/m²]\nλE_p: Potential latent heat flux [W/m²]\n\nDetails\n\nFor a model description, see TO DO ADD FULL MODEL DESCRIPTION IN DOCS.\n\nThe calculation is an extension of the model from Shuttleworth & Wallace (1985) to include interception. Equations are written in the notation of  Lhomme et al. (2012), see e.g. equations (16) and (33)\n\n\n\n\n\n","category":"method"},{"location":"#Soil","page":"Home","title":"Soil","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [EvaporationModel]\nPages = [\"soil.jl\"]","category":"page"},{"location":"#EvaporationModel.c_1-NTuple{4, Any}","page":"Home","title":"EvaporationModel.c_1","text":"c_1(w_1, w_sat, b, c_1sat)\n\nCompute force coefficient c_1 of force restore framework for soil mositure. See equation 20 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nw_1: Surface soil moisutre [m³ m⁻³]\nw_sat: Saturated soil moisture [m³ m⁻³]\nb: the Brooks-Corey/Clapp-Hornberger parameter, see compute_b\nc_1sat: See c_1sat\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.c_1sat-Tuple{T} where T","page":"Home","title":"EvaporationModel.c_1sat","text":"c_1sat(x_clay)\n\nCompute the value for force-restore coefficient c_1 when w_g =  w_sat. See equation 32 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nx_clay: The percentage of clay in the soil.\n\nReturns\n\nc_1sat: The computed value of c_1sat.\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.c_2-Union{Tuple{T}, Tuple{T, T, T}} where T","page":"Home","title":"EvaporationModel.c_2","text":"c_2(w_2, w_sat, c2_ref)\n\nCompute restore coefficient c_2 of force restore framework for soil moisture See equation 21 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nw_2: The second layer soil mositure [m³ m⁻³]\nw_sat: The saturated soil moisture [m³ m⁻³]\nc_2ref: See c_2ref\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.c_2ref-Tuple{T} where T","page":"Home","title":"EvaporationModel.c_2ref","text":"c_2ref(x_clay)\n\nCompute the value for force-restore coefficient c_2 when w_2 = 0.5 w_sat,  c_2ref  based on the percentage of clay in the soil. See equation 33 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nx_clay: The percentage of clay in the soil [%].\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.c_3-Tuple{T} where T","page":"Home","title":"EvaporationModel.c_3","text":"c_3(x_clay)\n\nCompute the coefficient for graviational drainage c_3 based on the percentage of clay in the soil. See equation 34 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nx_clay: The percentage of clay in the soil [%].\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.compute_a-Tuple{T} where T","page":"Home","title":"EvaporationModel.compute_a","text":"compute_a(x_clay)\n\nCompute a, a parameter for for w_geq calculation,  of clay in the soil. See equation 35 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nx_clay: The percentage of clay in the soil [%].\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.compute_b-Tuple{Any, Any}","page":"Home","title":"EvaporationModel.compute_b","text":"compute_b(::Val{:clay}, x_clay)\ncompute_b(::Val{:van_genuchten}, n)\n\nCompute b, the Brooks-Corey/Clapp-Hornberger parameter  (see equation 1 of Clapp & Hornberger  for its definition), based on percentage clay or the van Genuchten paramter n.\t\n\nArguments\n\napproach: Either Val(:clay) or Val(:van_genuchten).\nx_clay: The percentage of clay in the soil [%], only for approach = Val(:clay).\nn: The Van Genuchten parameter n, only for approach = Val(:van_genuchten).\t\n\nDetails\n\nFor the Val(:clay) approach, Equation (30) of  Noilhan & Mahfouf, 1996 is used.\n\nFor the Val(:van_genuchten) approach, the parameter equivalence between the Brooks-Corey and van Genuchten, is based on Morel-Seytoux et al., 1996.  Note that in this paper, M is equivalent to b. \n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.compute_p-Tuple{T} where T","page":"Home","title":"EvaporationModel.compute_p","text":"compute_p(x_clay)\n\nCompute p, a parameter for for w_geq calculation, based on the percentage of clay in the soil. See equation 36 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nx_clay: The percentage of clay in the soil [%].\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.w_geq-NTuple{4, Any}","page":"Home","title":"EvaporationModel.w_geq","text":"w_geq(w_2, w_sat, a, p)\n\nCompute w_geq, the equilibrium surface soil moisture (i.e. when capillary and  gravitational forces are in equilibrium). See equation 19 of Noilhan & Mahfouf, 1996.\n\nArguments\n\nw_2: The second layer soil moisture [m³ m⁻³].\nw_sat: The saturated soil moisture [m³ m⁻³].\na: Clapp-Hornberger parameter a (see compute_a)\np: Clapp-Hornberger parameter a (see compute_p)\n\n\n\n\n\n","category":"method"},{"location":"#Resistances","page":"Home","title":"Resistances","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [EvaporationModel]\nPages = [\"resistances.jl\"]","category":"page"},{"location":"#EvaporationModel.beta_to_r_ss-Union{Tuple{T}, Tuple{T, T}} where T","page":"Home","title":"EvaporationModel.beta_to_r_ss","text":"beta_to_r_ss(beta, r_as)\n\nCalculate soil surface resistance r_ss from soil evaporation efficiency β \n\nArguments\n\nbeta: Soil evaporation efficiency [-]\nr_as: Aerodynamic resistance between soil and canopy source height [s/m]\n\nDetails\n\nEquation used derived from equivalency between equation (6) and (7) of Merlin et al. (2016)\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.r_ss_to_beta-Union{Tuple{T}, Tuple{T, T}} where T","page":"Home","title":"EvaporationModel.r_ss_to_beta","text":"r_ss_to_beta(r_ss, r_as)\n\nCalculate soil evaporation efficiency β soil surface resistance r_ss \n\nArguments\n\nr_ss: Soil surface resistance [s/m]\nr_as: Aerodynamic resistance between soil and canopy source height [s/m]\n\nDetails\n\nEquation used derived from equivalency between equation (6) and (7) of Merlin et al. (2016)\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.soil_aerodynamic_resistance-Union{Tuple{T}, Tuple{Choudhury1988soil, Vararg{T, 5}}, Tuple{Choudhury1988soil, Vararg{T, 6}}} where T","page":"Home","title":"EvaporationModel.soil_aerodynamic_resistance","text":"soil_aerodynamic_resistance(::Choudhury1988soil, ustar, h, d_c, z_0mc, z_0ms, η=3)\n\nCalculate soil aerodynamic resistance, which is between the soil surface and the  canopy source height (z_m = z_0mc + d_c)\n\nArguments\n\napproach: The approach to use for calculating soil aerodynamic resistance\nustar: Friction velocity [m/s]\nh: Canopy height [m]\nd_c: Canopy displacement height [m]\nz_0mc: Roughness length for momentum transfer for canopy [m]\nz_0ms: Roughness length for momentum transfer for soil [m]\nη: Extinction coefficient of K in canopy, default = 3 [-]\n\nReturns\n\nr_as: Aerodynamic resistance between soil and canopy source height [s/m]\n\nDetails\n\nWith approach = Choudhury1988soil(), equation (25) of  Choudhury and Monteith (1988) is used.  \n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.soil_evaporation_efficiency-Union{Tuple{T}, Tuple{Pielke92, T, T}} where T","page":"Home","title":"EvaporationModel.soil_evaporation_efficiency","text":"soil_evaporation_efficiency(approach::Pielke92, w_1, w_fc)\nsoil_evaporation_efficiency(approach::Martens17, w_1, w_res, w_c)\n\nCalculate soil evaporation efficiency β, a factor between 0 and 1 which scales the  potential soil evaporation \n\nArguments\n\napproach: The approach to use for calculating soil evaporation efficiency, a subtype of   SoilEvaporationEfficiencyMethod\nw_1: Soil moisture from first layer [m³/m³]\n\nWith approach = Pielke92(), the following inputs are\n\nw_fc: Soil moisture at field capacity [m³/m³]\n\nWith approach = Martens17(), the following inputs are\n\nw_res: Residual soil moisture [m³/m³]\nw_c: Critical soil moisture [m³/m³]\n\nDetails\n\nWith approach = Pielke92(), β is calculated using euqation (7) of  Lee & Pielke (1992)\n\nWith approach = Martens17(), β is calculated using equation (6) of  Martens et al. (2017).\n\nExamples\n\nusing EvaporationModel\nw_fc = 0.35\nw_1 = w_fc / 2\nβ_p = soil_evaporation_efficiency(Pielke92(), w_1, w_fc)\nβ_p ≈ 0.25\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.surface_resistance-Union{Tuple{T}, Tuple{JarvisStewart, Vararg{T, 9}}} where T","page":"Home","title":"EvaporationModel.surface_resistance","text":"surface_resistance(::JarvisStewart, SW_in, VPD, T_a, w_2, w_fc, w_wilt, LAI, g_d, r_smin)\n\nCalculate surface resistance\n\nArguments\n\napproach: The approach to use for calculating surface resistance\nSW_in: Incoming solar radiation [W/m²]\nVPD: Vapor pressure deficit [Pa]\nT_a: Air temperature [K]\nw_2: Root zone soil moisture [m³/m³]\nw_fc: Soil moisture at field capacity [m³/m³]\nw_wilt: Soil moisture at wilting point [m³/m³]\nLAI: Leaf area index [m²/m²]\ng_d: Parameter relating VPD to stomatal conductance [Pa⁻¹]\nr_smin: Minimum stomatal resistance [s/m]\n\nReturns\n\nr_s: Surface resistance [s/m]\n\nDetails\n\nWith approach = JarvisStewart(), the Jarvis-Stewart model is used as given in equations  (8.9), (8.10), (8.11) and (8.14) of the  IFS Cy47r1 documentation Part IV: Physical processes.  The temperature constraint (f_4) comes from  Noilhan and Planton (1989) equation (37), with the default value of T_opt set to 298.0 K\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.ustar_from_u-Union{Tuple{T}, NTuple{4, T}, NTuple{5, T}} where T","page":"Home","title":"EvaporationModel.ustar_from_u","text":"ustar_from_u(u, z_obs, d, z_0m, ψ_m=0)\n\nCalculate the friction velocity from the wind speed at a given height assuming a logarithmic wind profile.\n\nArguments\n\nu: Wind speed at the measurement height [m/s]\nz_obs: Height of the wind speed measurement [m]\nd: Displacement height [m]\nz_0m: Roughness length for momentum transfer [m]\nψ_m: Stability correction for momentum transfer [m], default = 0\n\nReturns\n\nu_star: Friction velocity [m/s]\n\nDetails\n\nThe friction velocity is calculated using the logarithmic wind profile equation, given by:\n\nu(z) = fracu^*k ln left( fracz - dz_0m right) - psi_m\n\nFor more info on how to calculate psi_m, see the  Bigleaf package documentation\n\n\n\n\n\n","category":"method"},{"location":"#Utils","page":"Home","title":"Utils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [EvaporationModel]\nPages = [\"utils.jl\"]","category":"page"},{"location":"#EvaporationModel.compute_amplitude_and_phase-Tuple{AbstractVector, AbstractVector}","page":"Home","title":"EvaporationModel.compute_amplitude_and_phase","text":"compute_amplitude_and_phase(an::AbstractVector, bn::AbstractVector)\n\nTranslate the fourier coefficients from sin-cos form (see  fourier_series) to amplitude phase form:\n\nf(t) = a_0 + sum_n=1^M left( a_bn sin(n omega t + phi) right)\n\nSpecifically, it returns both a_{bn} and \\phi vectors. FYI: proof of conversion found here. Crucial to use atan2 function\n\n\n\n\n\n","category":"method"},{"location":"#EvaporationModel.fourier_series-Tuple{Any, ComponentArrays.ComponentArray, Any}","page":"Home","title":"EvaporationModel.fourier_series","text":"fourier_series(t, coeffs, ω)\n\nFunction that gives the Fourier series, as presented in equation 5 of Murray & Verhoef \n\nf(t) = a_0 + sum_n=1^M left( a_n cos(n omega t) +  b_n sin(n omega t) right)\n\nArguments\n\nt: Timestamp in seconds \ncoeffs::ComponentArray: array holding the coefficients\na0: Mean component\nan: Cosine coefficients\nbn: Sine coefficients\nω: Radial frequency [rad/s]\n\n\n\n\n\n","category":"method"}]
}
